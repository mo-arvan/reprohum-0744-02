# -*- coding: utf-8 -*-
"""reprohum-fairpay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vp6-l8n8KA96lrdJ3tT6M64Fn40RiNBq

# ReproHum Fair Pay
<a target="_blank" href="https://colab.research.google.com/github/mo-arvan/paraphrase-generation-reproduction/blob/main/notebooks/reprohum_fairpay.ipynb">
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>
</a>

All values are in GBD.

We will try to scale the original study wage based on the minimum wage at the time.
If the value is lower than UK living wage, we use that instead.
"""

USD_to_GBD_may_2025 = 0.75185

local_min_wage = 15.00 * USD_to_GBD_may_2025 # https://labor.illinois.gov/laws-rules/fls/minimum-wage-law.html

GBD_to_USD_nov_15_2021 = 1.34053
USD_to_GBD_nov_15_2021 = 0.74517
original_study_wage = 10.5 * USD_to_GBD_nov_15_2021 # USD
original_study_min_wage = 9.9  # source: https://www.statista.com/statistics/280076/uk-living-wage/

multiplier = max(1, (original_study_wage / original_study_min_wage))

#GBD_to_USD_feb_9_2024 = 1.26183 # https://www.oanda.com/currency-converter/en/?from=GBP&to=USD&amount=1
uk_living_wage = 12.60  # source: https://www.livingwage.org.uk/

from math import ceil
def round_up(n, factor=100):
    return ceil(n * factor) / factor

scaled_wage = local_min_wage * multiplier #

reproduction_wage = max(scaled_wage, uk_living_wage)

estimated_task_minutes = 8
wage_per_task = round_up(reproduction_wage * estimated_task_minutes/ 60)

print(f'wage per task £{wage_per_task:0.2f}')
print(f'hourly wage: £{wage_per_task * 3:0.2f}')
print(f'reproduction cost: £{wage_per_task * 3 * 40:0.2f}') # 60 tasks, each given 3 times

